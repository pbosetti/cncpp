#ifndef DEFINES_HPP
#define DEFINES_HPP

#include <optional>
#include <string>

/*
  ____        __ _       _ _   _                 
 |  _ \  ___ / _(_)_ __ (_) |_(_) ___  _ __  ___ 
 | | | |/ _ \ |_| | '_ \| | __| |/ _ \| '_ \/ __|
 | |_| |  __/  _| | | | | | |_| | (_) | | | \__ \
 |____/ \___|_| |_|_| |_|_|\__|_|\___/|_| |_|___/
*/                                               
#define VERSION "@VERSION@"
#define BUILD_TYPE "@CMAKE_BUILD_TYPE@"
#define @BUILD_FLAG@
#define NUMBERS_WIDTH "7"


/*
  _____                      
 |_   _|   _ _ __   ___  ___ 
   | || | | | '_ \ / _ \/ __|
   | || |_| | |_) |  __/\__ \
   |_| \__, | .__/ \___||___/
       |___/|_|              
*/

//typedef float data_t;

using data_t = double;
using opt_data_t = std::optional<data_t>;
using opt_int_t = std::optional<int>;


/*
  _   _                                                
 | \ | | __ _ _ __ ___   ___  ___ _ __   __ _  ___ ___ 
 |  \| |/ _` | '_ ` _ \ / _ \/ __| '_ \ / _` |/ __/ _ \
 | |\  | (_| | | | | | |  __/\__ \ |_) | (_| | (_|  __/
 |_| \_|\__,_|_| |_| |_|\___||___/ .__/ \__,_|\___\___|
                                 |_|                   
*/


namespace cncpp {

std::string version() {
  return VERSION " (" BUILD_TYPE ")";
}

class Object {
public:
  virtual std::string desc(bool colored = true) const = 0;

protected:
#ifdef RELEASE_BUILD
  const bool _debug = false;
#else 
  const bool _debug = true;
#endif

};

class CNCError : public std::exception {
public:
  CNCError(const char *m, const Object *o) : _msg(m), _obj(o) {}
  CNCError(const std::string &m, const Object *o) : _msg(m), _obj(o) {}

  const char *what() const noexcept override { return _msg.c_str(); }
  std::string who() { return _obj->desc(); }


private:
  const std::string _msg;
  const Object *_obj;
};



}


#endif // DEFINES_HPP