---
title: "CNCPP Testing"
format: html
---

```{r setup, include=FALSE}
library(tidyverse)
library(glue)
library(Rcpp)
library(plotly)
```

# Prerequisites

This project uses `renv` to manage dependencies. To install the required packages, run the following command in the console:

```{r}
#| eval: false
#| include: true
# Install renv 
install.packages("renv")
# install renv dependencies
renv::restore()
```


# Testing the library

The R package `Rcpp` allows to build interfaces to C++ libraries. To do so, we create a *wrapper* class in `cncpp_test.cpp` with some magic comments and some Rcpp functions. That wrapper class needs then to be compiled by Rcpp as follows:

```{r}
# Set environment variables to proper compiler flags and library paths
Sys.setenv(PKG_CXXFLAGS = glue("-I{getwd()}/../usr/include -I{getwd()}/../build/_deps/json-src/include -I/opt/homebrew/include"))
Sys.setenv(PKG_LIBS = glue("-L{getwd()}/../usr/lib -L{getwd()}/../build/_deps/yaml-cpp-build/ -L{getwd()}/../build/_deps/mosquitto-build/lib -L{getwd()}/../build/_deps/mosquitto-build/lib/cpp -L/opt/homebrew/lib -lcncpp_lib -lfmtd -lyaml-cppd -lmosquittopp_static -lmosquitto_static"))
Sys.getenv("PKG_CXXFLAGS")
Sys.getenv("PKG_LIBS")
# Compile the C++ source code
sourceCpp("cncpp_test.cpp")
```

Now we have a `cncpp_test` object in R, which we can use to interact with the underlying `cncpp_lib`. To do so, we must create a new instance with the `new()` function, then the resulting objects has **methods** that are accessible via the `$` operator:

```{r}
test <- new(cncpp_test, "../machine.yml")
cat("CNCPP Version:", test$version(), "\n")
cat("Machine:\n", test$machine_desc())
```

